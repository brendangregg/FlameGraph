#!/usr/bin/perl -w
#
# stackcolllapse-perf.pl	collapse perf samples into single lines.
#
# Parses a list of multiline stacks generated by "perf script", and
# outputs a semicolon separated stack followed by a space and a count.
# If memory addresses (+0xd) are present, they are stripped, and resulting
# identical stacks are colased with their counts summed.
#
# USAGE: ./stackcollapse-perf.pl infile > outfile
#
# Example input:
#
#  swapper     0 [000] 158665.570607: cpu-clock:
#         ffffffff8103ce3b native_safe_halt ([kernel.kallsyms])
#         ffffffff8101c6a3 default_idle ([kernel.kallsyms])
#         ffffffff81013236 cpu_idle ([kernel.kallsyms])
#         ffffffff815bf03e rest_init ([kernel.kallsyms])
#         ffffffff81aebbfe start_kernel ([kernel.kallsyms].init.text)
#  [...]
#
# Example output:
#
#  swapper;start_kernel;rest_init;cpu_idle;default_idle;native_safe_halt 1
#
# Input may be created and processed using:
#
#  perf record -a -g -F 997 sleep 60
#  perf script | ./stackcollapse-perf.pl > out.stacks-folded
#
# Copyright 2012 Joyent, Inc.  All rights reserved.
# Copyright 2012 Brendan Gregg.  All rights reserved.
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at docs/cddl1.txt or
# http://opensource.org/licenses/CDDL-1.0.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at docs/cddl1.txt.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
# 02-Mar-2012	Brendan Gregg	Created this.
# 02-Jul-2014	   "	  "	Added process name to stacks.

use strict;
use Getopt::Long;
use File::Basename;

my %collapsed;

sub remember_stack {
	my ($stack, $count) = @_;
	$collapsed{$stack} += $count;
}

my @stack;
my $pname;
my $include_pname = 1;	# include process names in stacks
my $tidy_java = 1;	# condense Java signatures
my $tidy_generic = 1;	# clean up function names a little
my $perf_cmdline;
my $the_pname = "";

my $show_inline = 0;
my $show_context = 0;
GetOptions( 'inline' => \$show_inline,
            'context' => \$show_context)
or die("Error in command line arguments\n");

my %LineData;

sub Return_Lineno{
	 #my $i;
   my @pair = split(':', $_[0]);

   #info for this source file exist, look it up
	 if ( ! exists $LineData{$pair[0]}) {
	 	  #print $pair[0] . ".ln" . "\n";
			if (open(my $fh, '<:encoding(UTF-8)', $pair[0] . ".ln")) {
				my @AoA;
				while (my $row = <$fh>) {
				  chomp $row;
				  #print "$row\n";
				  my @begin_end = split(',', $row);
				  my @begin = split(':', $begin_end[0]);
				  my @end   = split(':', $begin_end[1]);
				  #print $begin[0] . "," . $end[0] . "\n";
				  push @AoA, [$begin[0] , $end[0]];
				}

				$LineData{$pair[0]} = [ @AoA ];
		  } else {
		  	return $_[0];
		  }
	 }

	 my @AoA = @{$LineData{$pair[0]}};
	 #for my $aref ( @AoA ) {
   #  print "\t [ @$aref ],\n";
   #}

	 for my $i (0 .. $#AoA) {
	 	  #print $AoA[$i][0] . "\n";
      if ($pair[1] >= $AoA[$i][0] and $pair[1] <= $AoA[$i][1]) {
      	my $ii = $i + "1";
      	#print $pair[0] . ":-" . $ii . "\n";
       	return $pair[0] . ":-" . $ii;
      }
	 }

	 return $_[0];
}

foreach (<STDIN>) {
	# TODO Move this logic out of main loop
	if(/^# cmdline : (.+)/) {
		$perf_cmdline = $1;
	}

	next if m/^#/;
	chomp;

	if (m/^$/) {
		if ($include_pname) {
			if (defined $pname) {
				unshift @stack, $pname;
			} else {
				unshift @stack, "";
			}
		}
		remember_stack(join(";", @stack), 1) if @stack;
		undef @stack;
		undef $pname;
		next;
	}

	if (/^(\S+)\s/) {
		$pname = $1;
	} elsif (/^\s*(\w+)\s*(.+) \((\S+)\)/) {
		my ($pc, $func, $mod) = ($1, $2, $3);

		# TODO make this run faster
		if ($show_inline == 1) {
			# The module is the one that has its filename as substring of $perf_cmdline
			# TODO Move this logic out of main loop
			if ($the_pname eq "") {
				# valid file tree path
				if (substr($mod, 0, 1)  eq "/") {
					if (index($mod, "perf") == -1 && index($perf_cmdline, basename($mod)) != -1) {
						$the_pname = $mod;
					}
				}
			}

			# Capture addr2line output
			if ($mod eq $the_pname) {
				my $a2l_output = `addr2line -a $pc -e $mod -f -i -C`;

				# Remove first line
				$a2l_output =~ s/^(.*\n){1}//;

				my @fullfunc;
				my $one_item = "";
				for (split /^/, $a2l_output) {
					chomp $_;

					# Remove discriminator info if exists
					$_ =~ s/ \(discriminator \S+\)//;

					if ($one_item eq "") {
						$one_item = $_;
					} else {
						if ($show_context == 1) {
              #my @pair = split(':', $_);

							#if ($lineno_data_generated == 0) {
              #  my $DN = dirname($pair[0]);
              #  $DN =~ /CPU2006\/[^\.]+\.([^\/]+)\//;
              #  $DN = $DN . "/" . $1 . ".bc";
							#	`opt -load ~/Install/generic/llvm-3.5/lib/LLVMLoopRangeDump.so -S -loop-range-dump -o /dev/null $DN > /tmp/xxx`;
              #  $lineno_data_generated = 1;
              #}

              #print "bcded";
              #my $matched_lineno = `clang -emit-llvm -S -g $pair[0] -o - | opt -load ~/Install/generic/llvm-3.5/lib/LLVMLoopRangeDump.so -S -loop-range-dump -o /dev/null | grep -n $pair[1] | cut -f1 -d:`;
              #my $prog_bc = "../build/" . split('_', $the_pname)[0] . ".bc";
              #print $prog_bc;
              #my $matched_lineno = `opt -load ~/Install/generic/llvm-3.5/lib/LLVMLoopRangeDump.so -S -loop-range-dump -o /dev/null $prog_bc | grep -n $pair[1] | cut -f1 -d:`;
              #my $matched_lineno = `grep -n "$_" /tmp/xxx | cut -f1 -d:`;
              #print $matched_lineno;
              #unshift @fullfunc, $one_item . ":$_";
							#print "input# " . $_ . "\n";
              #print "result# " . $one_item . ":" . $pair[0] . ":" . $matched_lineno . "\n";
              #unshift @fullfunc, $one_item . ":" . $pair[0] . ":" . $matched_lineno;
              unshift @fullfunc, $one_item . ":" . Return_Lineno($_);
						} else {
							unshift @fullfunc, $one_item;
						}
						$one_item = "";
					}
				}
				unshift @stack, join(";", @fullfunc);
				next;
			}
		}

		next if $func =~ /^\(/;		# skip process names
		if ($tidy_generic) {
			$func =~ s/;/:/g;
			$func =~ tr/<>//d;
			$func =~ s/\(.*//;
			# now tidy this horrible thing:
			# 13a80b608e0a RegExp:[&<>\"\'] (/tmp/perf-7539.map)
			$func =~ tr/"\'//d;
			# fall through to $tidy_java
		}
		if ($tidy_java and $pname eq "java") {
			# along with $tidy_generic, converts the following:
			#	Lorg/mozilla/javascript/ContextFactory;.call(Lorg/mozilla/javascript/ContextAction;)Ljava/lang/Object;
			#	Lorg/mozilla/javascript/ContextFactory;.call(Lorg/mozilla/javascript/C
			#	Lorg/mozilla/javascript/MemberBox;.<init>(Ljava/lang/reflect/Method;)V
			# into:
			#	org/mozilla/javascript/ContextFactory:.call
			#	org/mozilla/javascript/ContextFactory:.call
			#	org/mozilla/javascript/MemberBox:.init
			$func =~ s/^L// if $func =~ m:/:;
		}
		unshift @stack, $func;
	} else {
		warn "Unrecognized line: $_";
	}
}

foreach my $k (sort { $a cmp $b } keys %collapsed) {
	printf "$k $collapsed{$k}\n";
}

#`rm /tmp/xxx`
